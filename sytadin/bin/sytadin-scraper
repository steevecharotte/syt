#!/usr/bin/env perl

use strict;
use Getopt::Long qw(:config no_ignore_case);
use SYTADIN::Query;

my $program = 'sytadin-scraper';

my $help_content = "usage: 
* to search nodes:
   $program [-h] -S '<node name>'
* to query sytadin:
   $program -s '<start node>' -e '<end node>' [-v '<inter node>'] [-l]

Command line utility to query www.sytadin.fr

arguments:
    -h, --help              : display this help
    -l, --light             : light output 
           (format '<traject>|<reliability>' (optional)
    -S, --search <node name>: search the nodes
           matching '.*<node name>.*' 
           in available nodes (case insensitive)
    -s, --start <start node>: node where we start 
    -e, --end <end node>    : node where we end
    -v, --via <inter node>  : intermediate node (optional)
";

my $search;
my $start;
my $end;
my $help;
my $light;
my $via = '';

#we get the arguments
if (not(GetOptions (
            "S|search=s" => \$search,
            "s|start=s"  => \$start,
            "e|end=s"    => \$end,
            "v|via=s"    => \$via,
            "light"      => \$light,
            "help"       => \$help,
   ))){
    print "Error in command line arguments\n"; exit 3;
}

$| = 1;

if ($help) {
    print $help_content;
    exit 1;
}

if ($search){
    my @result = SYTADIN::Query::search_node($search);
    my $size = @result;
    if ( $size eq 0 ){
        print "No node found\n";
        exit 1;
    } 
    else {
        print "List of matching nodes:\n";
        foreach (@result){
           print "* '$_'\n";
        }
    exit 0;
    }
}

if (not($start) or not($end)){
    print "options -s <start node> and -e <end node> are mandatory\n";
    exit 1;
}

my %info = SYTADIN::Query::get_time_reliability($start, $end, $via);

my $via_message = "";

if ($via ne ''){
    $via_message = " via $via"
}

if ($light){
    print "$info{'traject_time'}|$info{'reliability'}\n";
    exit 0
}
else{
    print "$start to $end$via_message: $info{'traject_time'} ($info{'reliability'}%)\n";
    exit 0
}

